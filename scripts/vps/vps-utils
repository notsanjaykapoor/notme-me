#!/usr/bin/env python

import os
import subprocess
import time

import click
import dotenv
import ulid

dotenv.load_dotenv(".env.vps")

@click.group()
def cli():
    pass


@click.command()
@click.option("--dockerfile", default="Dockerfile", required=False, help="")
@click.option("--sha", default="", required=False, help="git repo sha or tag")
@click.option("--no-push", is_flag=True, show_default=True, default=True, help="")
@click.option("--env", default="prd", required=False, help="app env, e.g. stg, prd")
def build(dockerfile: str, sha: str, no_push: bool, env: str):
    repo = os.environ.get("VPS_DOCKER_REPO")

    time_start_unix = time.time()

    version = sha or f"{env}-{ulid.new()}"

    print("docker build '{dockerfile}' version {version}", end=" ... ", flush=True)

    _docker_build(dockerfile=dockerfile, version=version, repo=repo, push=no_push)

    _print_ok("ok")

    time_mins = round((time.time() - time_start_unix), 1)

    _print_ok(f"build completed in {time_mins} secs")


@click.command()
@click.option("--host", default=None, required=True, help="host or ip address")
@click.option("--user", default=None, required=True, help="ssh username")
def deploy(host: str, user: str):
    repo = os.environ.get("VPS_DOCKER_REPO")
    image = f"{repo}:latest"

    print(f"host '{host}' image pull '{image}'", end=" ... ", flush=True)

    _docker_image_pull(host=host, user=user, image=image)

    _print_ok("ok")

    env_file = os.environ.get("VPS_APP_ENV_FILE")

    print(f"host '{host}' file cp '{env_file}'", end=" ... ", flush=True)

    _vps_file_copy(host=host, user=user, file=env_file)

    _print_ok("ok")

    print(f"host '{host}' docker stop", end=" ", flush=True)

    _docker_app_stop(host=host, user=user)

    _print_ok("ok")

    print(f"host '{host}' docker start", end=" ", flush=True)

    _docker_app_start(host=host, user=user)

    _print_ok("ok")


def _docker_app_start(host: str, user: str) -> int:
    """
    start docker container
    """
    cmd = _docker_run_cmd()

    print(f"'{cmd}'", end=" ... ", flush=True)

    response = subprocess.run(
        f"ssh -t {user}@{host} '{cmd}'",
        shell=True,
        capture_output=True,
    )

    if response.returncode != 0:
        _print_error(response.stdout.decode("utf-8"))
        exit(response.returncode)

    return response.returncode


def _docker_app_stop(host: str, user: str) -> int:
    """
    stop and remove docker container
    """
    name = os.environ.get("VPS_APP_NAME")

    print(f"'{name}'", end=" ... ", flush=True)

    cmds = [
        f"docker stop {name}",
        f"docker rm {name}",
    ]

    for cmd in cmds:
        response = subprocess.run(
            f"ssh -t {user}@{host} '{cmd}'",
            shell=True,
            capture_output=True,
        )

    return 0

def _docker_build(dockerfile: str, version: str, repo: str, push: bool) -> int:
    response = subprocess.run(
        f"docker build -t {repo}:{version} -t {repo}:latest --platform linux/amd64 --build-arg APP_VERSION={version} -f {dockerfile} .",
        shell=True,
        capture_output=False,
    )

    if response.returncode != 0:
        exit(response.returncode)

    if not push:
        # build but don't push image
        return response.returncode

    response = subprocess.run(
        f"docker push {repo}:{version}",
        shell=True,
        capture_output=False,
    )

    if response.returncode != 0:
        exit(response.returncode)

    response = subprocess.run(
        f"docker push {repo}:latest",
        shell=True,
        capture_output=False,
    )

    if response.returncode != 0:
        exit(response.returncode)

    return response.returncode


def _docker_image_pull(host: str, user: str, image: str) -> int:
    response = subprocess.run(
        f"ssh -t {user}@{host} 'docker image pull {image}'",
        shell=True,
        capture_output=True,
    )

    if response.returncode not in [0]:
        _print_error(response.stdout.decode("utf-8"))
        exit(response.returncode)

    return response.returncode


def _docker_run_cmd() -> str:
    """construct docker run command from env vars"""
    network = os.environ.get("VPS_DOCKER_NETWORK")
    port = os.environ.get("VPS_DOCKER_PORT")
    repo = os.environ.get("VPS_DOCKER_REPO")
    image = f"{repo}:latest"
    app_entrypoint = os.environ.get("VPS_APP_ENTRYPOINT")
    app_mount = os.environ.get("VPS_APP_MOUNT")
    app_name = os.environ.get("VPS_APP_NAME")
    env_file = os.environ.get("VPS_APP_ENV_FILE")

    docker_cmd = f"docker run -d --name {app_name} --network {network} --env-file {env_file} -p {port}:{port}"

    if app_mount:
        docker_cmd = f"{docker_cmd} -v {app_mount}"

    return f"{docker_cmd} {image} {app_entrypoint}"


def _vps_file_copy(host: str, user: str, file: str) -> int:
    response = subprocess.run(
        f"scp {file} {user}@{host}:",
        shell=True,
        capture_output=True,
    )

    if response.returncode not in [0]:
        _print_error(response.stdout.decode("utf-8"))
        exit(response.returncode)

    return response.returncode


def _print_error(s: str):
    print("\x1b[1;31m" + s + "\x1b[0m", flush=True)


def _print_ok(s: str):
    print("\x1b[1;32m" + s + "\x1b[0m", flush=True)


def _print_status(s: str):
    print("\x1b[1;36m" + s + "\x1b[0m", flush=True)


cli.add_command(build)
cli.add_command(deploy)

if __name__ == "__main__":
    cli()